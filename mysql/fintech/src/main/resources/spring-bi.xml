<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"  xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
	default-lazy-init="true">

	<bean id="dataSource_bi" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.bi.url}"/>
        <property name="username" value="${jdbc.bi.user}"/>
        <property name="password" value="${jdbc.bi.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <!-- <property name="validationQuery" value="${druid.validationQuery}" /> -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />
    </bean>

    <!-- MyBatis配置 -->
	<bean id="sqlSessionFactory_bi" class="com.fintech.platform.restservice.mybatis.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_bi" />
		<property name="plugins">  
            <ref bean="pageInterceptor"/>  
        </property>  
		<!-- 自动扫描domain目录, 配置包的基路径即可，多个包用;分割 -->
		<property name="typeAliasesPackage" value="com.easub" />
		<!-- 显式指定Mapper文件位置 -->	
		<property name="mapperLocations" >
			<list>
				<value>classpath*:com/easub/**/dao/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean id="mapperScanner_bi" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.easub" />
		<property name="annotationClass" value="com.fintech.platform.core.mybatis.MyBatisRepository"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_bi" />
	</bean>
	
	<bean id="transactionManager_bi" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource_bi" />
    </bean>

	<!-- 使用annotation 定义 注解事务 优先 使用注解事务 order="0" -->
    <tx:annotation-driven transaction-manager="transactionManager_bi" proxy-target-class="true" order="0" />
	<!-- 用注解来实现事务管理 -->
</beans>